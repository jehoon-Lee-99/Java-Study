● 산술 연산자 ●
부호를 결정하는 부호 연산자
산술 연산을 할 수 있는 산술 연산자
1씩 증가하거나 감소 시키는 증감연산자
피 연산자가 1개인 연산자는 단항 연산자

    //부호 연산자 
    int i1 = -5;
    int i2 = +i1;
    int i3 = -i1;

    //증감 연산자 
    int i4 = ++i3;
    int i5 = i3++;
    int i6 = --i3;
    int i7 = i3--;
    
앞에 위치할 경우 적용(+,-)후 반환
뒤에 위치할 경우 반환 후 적용(+,-)

2개의 변수 이용한 산술 연산
i + j;  i와 j의 합
i - j;  i와 j의 차
i * j;  i와 j의 곱
i / j;  i를 j로 나눈 몫
i % j;  i를 j로 나눈 나머지


● 비교 연산자 ●
비교 연산자의 결과는 boolean이다.

단순 대입 연산자

i = 10
오른쪽에 있는 피연산자의 값을 왼쪽 피연산자의 변수에 저장
복합 대입 연산자

★ 정해진 연산을 수행한 후에 결과를 대입


● 비교 연산자 ●
논리곱 (&&, &) - 피연산자가 모두 true일 경우에만 연산 결과가 true 이다.
논리합 (||,|) - 피연산자 중 하나만 true이면 연산 결과는 true 이다.
배타적 논리합 (^) -> 피연산자가 서로 다른 값일 경우만 연산 결과가 true 이다.
논리 부정 (!) -> 피연산자의 논리값을 바꾼다. true는 false로 false는 true로 바꾼다.


● 삼항 연산자 ●
int b1 = (5>4) ? 50 : 40;
괄호 안의 값이 True/false 인가에 따라서 int의 값이 달라진다.
이를 if문으로 표현하면
     int b2 = 0;
          if(5 > 4){
              b2 = 50;
          }else{
              b2 = 40;
            

● 연산자 우선순위 ●
최우선연산자 ( ., [], () )
단항연산자 ( ++,--,!,~,+/-  : 부정, bit변환>부호>증감)
산술연산자 ( *,/,%,+,-,shift) < 시프트연산자 ( >>,<<,>>> ) >
비교연산자 ( >,<,>=,<=,==,!= )
비트연산자 ( &,|,,~ )
논리연산자 (&& , || , !)
삼항연산자 (조건식) ? :
대입연산자 =,*=,/=,%=,+=,-=


● if문 ●
if(조건식){
    실행문;
    실행문;
}else if(조건식){
    실행문;
}else{
    실행문;
}


● switch문 ●
switch문에서 사용하는 키워드는 switch, case, default, break 이다.
switch문은 break가 없다면 해당되는 case 이후까지 계속 진행이 된다.
    int value = 1;

    switch(value){
        case 1: 
            System.out.println("1");
        case 2:
            System.out.println("2");
        case 3 :
            System.out.println("3");
        default :
            System.out.println("그 외의 숫자"); 
    }
반환값: 1 2 3 그 외의 숫자


● while문 ●
조건문의 실행결과가 true일 동안 반복해서 실행한다.
while(조건문){
    실행문; 

do-while문은 무조건 한번 수행된다.
do{
  //반복할 문장들
}while()


● for 문 ●
for반복문은 변수초기화, 조건식, 증감식이 한줄에 모두 있다.
  1. 초기화식은 최초 한 번만 수행합니다.
  2. 조건식을 수행해서 수행결과가 false라면 for 반복문을 빠져 나갑니다.
  3. 수행 결과가 true라면 실행문을 수행한다.
  4. 증감식을 수행한다.
  5. 2번부터 4번까지 반복적으로 수행한다.
  
      for(초기화식; 조건식; 증감식){
        실행문;
        실행문;
       }
       
