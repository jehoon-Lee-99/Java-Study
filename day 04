■ 클래스 ■
자바는 객체를 만들기 위해 반드시 클래스를 먼저 만들어야 한다. 클래스는 객체를 만들기 위한 일종의 틀이다.

public class Car{

}

  ● 객체 생성하기
public class CarExam{
    public static void main(String args[]){
        Car c1 = new Car();
        Car c2 = new Car();
    }
}
 
   ● 참조형 변수
String str = new String("hello");

str 변수 앞에 기본형 타입이 아닌 String클래스가 적혀있다.
이퀄(=)뒤에는 new 다음에 생성자라는 것이 있다.
new 라는 키워드는 객체를 메모리에 올려준다. 이렇게 메모리에 올라간 객체를 인스턴스라고 말한다.
메모리에 올라간 인스턴스를 가리키는 변수, 참조하는 변수, 레퍼런스 하는 변수가 str 이다.
"참조한다", "레퍼런스 한다"라는 것은 변수가 인스턴스를 가지고 있는게 아니라 말그대로 가리킨다는 의미이다.
메모리의 위치값이 저장된다고 하더라도, 어떤 메모리에 저장되는지 그 정보를 알 수 있는 방법은 없다.

   ● String 클래스
1. new 연산자를 이용하지 않고 인스턴스를 만드는 경우
    String str1 = "hello";
    String str2 = "hello";
"hello"라는 문자열이 메모리 중에서 상수가 저장되는 영역에 저장된다. 상수는 변하지 않는 값을 의미.
String str2 = "hello"; 이 문장이 실행될 때에 hello 라는 문자열 상수는 이미 만들어져 있으므로 str1이 참조하는 인스턴스를 str2도 참조한다.

2. new 연산자를 이용해서 인스턴스를 만드는 경우
    String str3 = new String("hello");
    String str4 = new String("hello");
new연산자를 이용하여 인스턴스를 만들면 인스턴스는 무조건 새롭게 만들어진다.
String str4 = new String("hello"); 이 문장이 실행될때도 새롭게 만들게 되므로, str3 과 str4는 서로 다른 인스턴스를 참조한다.

### 같은 레퍼런스인지 확인할때: == 사용
    같은 문자열인지 확인할때: str1.equals(str2)
    
   ● 필드(field) 선언
객체가 가지는 속성을 필드(Field)라고 한다.

public class Car{
    String name;    
    int number;
}

public class CarExam{
    public static void main(String args[]){
        Car c1 = new Car();
        Car c2 = new Car();
        
        //c1.name은  c1이 참조하는 객체의 name 을 의미
        c1.name = "소방차";  //c1이 참조하는 객체의 name을 소방차로 설정 
        c1.number = 1234;   // c1.number = 1234란 c1이 참조하는 객체의 number를 1234 로 설정 

        c2.name = "구급차"  //c2가 가리키는 객체의name을 구급차로 설정
        c2.number = 1004;  //c2가 가리키는 객체의 number를 1004로 설정

        System.out.println(c1.name);  //콘솔에 c1이 참조하는 객체의 name 을 출력합니다. 
        System.out.println(c1.number); //콘솔에 c1이 참조하는 객체의 number 를 출력합니다. 

        String name = c2.name;   //c2가 참조하는 객체의 name 을 String 타입 변수 name 도 참조하게 합니다.
    }
}
 

■ 매서드 ■
필드가 물체의 상태라면, 물체의 행동에 해당하는게 메서드
메서드는 입력값이 있고, 그 입력값을 받아서 무언가 한 다음 결과를 도출해 내는 수학의 함수와 비슷

  ● 매서드 선언
1. 매개변수도 없고 리턴하는 것도 없는 형태의 메소드
     public class MyClass{
        public void method1(){
            System.out.println("method1이 실행됩니다.");
        }
    }
2. 정수를 받아들인 후, 리턴하지 않는 메소드 (여러개일경우 , 로 구분)
    public class MyClass{       
        public void method2(int x){
            System.out.println(x + " 를 이용하는 method2입니다.");
        }
    }
    
3. 아무것도 받아들이지 않고, 정수를 반환하는 메소드 (리턴해주는 타입을 매서드 앞에 작성)
    public int method3(){
        System.out.println("method3이 실행됩니다.");

        return 10;
        }
        
4. 정수를 2개 매개변수로 받고, 아무것도 반환하지 않는 메소드
    public void method4(int x, int y){
        System.out.println(x + "," + y + " 를 이용하는 method4입니다.");
    }
    
5. 정수를 한개 받아들인 후, 정수를 반환하는 메소드
public class MyClass{
    public void method(){
        System.out.println("method1이 실행됩니다.");
    }

    public void method2(int x){
        System.out.println(x + " 를 이용하는 method2입니다.");
    }

    public int method3(){
        System.out.println("method3이 실행됩니다.");

        return 10;
    }

    public void method4(int x, int y){
        System.out.println(x + "," + y + " 를 이용하는 method4입니다.");
    }
    
    ● 매서드 활용
메소드를 사용하기 위해서는 메소드가 정의된 클래스인 MyClass 가 생성되어야 한다
객체를 생성할 때는 new 연산자를 이용한다.
메소드 사용할때는 생성된 클래스를 참조하는 레퍼런스변수.메소드명() 으로 사용할 수 있다.

    public class MyClassExam{
        public static void main(String args[]){
            MyClass my1 = new MyClass(); //메소드가 정의된 클래스 생성 

            my1.method1();   //MyClass에서 정의해 놓은 메소드 method1() 를 호출한다.       

            my1.method2(10);

            int x = my1.method3();  //MyClass의 method3이 돌려주는 리턴값을 변수에 저장

            System.out.println("method3 이 리턴한 " + x + " 입니다.");

            my1.method4(10,100);

            int x2 = my1.method5(50);

            System.out.println("method5 가 리턴한 " + x2 + " 입니다.");

        }
    }
