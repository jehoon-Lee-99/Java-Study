● 자바 실행 ●
코드 작성 - 코드 컴파일 - JVM으로 실행
*컴파일이란? 작성한 코드를 실행 가능한 파일로 변경해주는 것


코드 작성 연습 코드 
public class HelloWorld{
    public static void main(String args[]){
        System.out.println("Hello World");
    }
}

코드
cd c:\tmp ~ 경로지정
javac 파일명으로 컴파일
java로 실행



● 이클립스에서 실행 ●

사용자 홈디렉토리 아래에 workspace 폴더를 지정
first 프로젝트 생성
소스 작성

src폴더에서 HelloWorld.java파일 생성
앞에서 만들었던 파일과 똑같은 파일을 HelloWorld.java파일로 작성
워크스페이스 경로를 파일탐색기로 열어보면 src폴더에 HelloWorld.java파일 확인 가능
컴파일

bin폴더를 열어보면 HelloWorld.class파일 생성되어있음 (이클립스는 소스파일에 문제가 없다면 자동으로 컴파일하여 bin폴더에 클래스를 만듬.)
실행

클래스를 선택한 후 우측버튼을 클릭하고 자바 어플리케이션을 실행하는 메뉴를 선택


★ 자바에서 주석처리는 // 혹은 /* */를 활용함 (단축키 ctrl+/)


● 변수 ●
변수는 언제든지 값이 변할 수 있음.
타입 변수이름;

int count; (정수 값을 담을 수 있는 count라는 이름의 변수를 선언)
double average; (실수 값을 담을 수 있는 average 라는 변수를 선언)
변수의 종류에 맞지 않는 값을 담을 시 컴파일 에러 발생

변수의 이름을 정할 때 자바 언어에서 정해놓은 규칙
식별자 (identifier)는 클래스, 메소드, 변수 등 다양한 대상에 대해 이름이 붙여지는 경우. 그 이름을 뜻 함

java 식별자 명명 규칙
하나 이상의 글자로 이루어져야 함
첫 번째 글자는 문자 이거나 '$', '_'이어야 함
두번재 이후의 글자는 숫자, 문자, '$', '_'이어야 함
'$', '_' 이외의 특수문자 사용 불가능

길이 제한이 없음
키워드는 식별자로 사용할 수 없음
상수 값을 표현하는 단어 true, false, null은 식별자로 사용할 수 없음

변수 명명 관례
첫 번째 문자가 소문자인 명사로 정함
여러 단어로 구성된 이름의 경우 두번째 단어부터 첫글자를 대문자로 함
'_'을 쓰지 않음

규칙은 반드시 지켜야 한다. 지키지 않으면 컴파일시 에러가 발생함.
관례는 지키지 않아도 컴파일에러가 발생하지는 않지만, 약속이기 때문에 지켜주는것이 좋다.


● 상수 ●
상수는 수식에서 변하지 않는 값.
      final 상수타입 상수명;
으로 상수를 선언한다.

상수 명명 관례
대문자로만 구성된 명사로 정함
여러 단어로 구성된 이름의 경우 단어 사이에 '_'을 써서 구분함.
ex) OIL_PRICE

상수를 사용해야 하는 경우
값이 변하면 위험한 경우에 상수를 사용

값만 봤을때 무엇을 의미하는지 쉽게 파악할 수 없는 값(원주율 등)에도 값 자체를 사용하기 보다는 상수를 사용
    ex) final double PI = 3.14159;

● 기본형 ●
자바는 반드시 데이터 타입을 지정해야함

논리형
boolean: true/false (1byte)

문자형
char: 0~65535 사이 문자 (2byte)

정수형
byte: -128 ~127 (1byte)
short: -32768 ~32767 (2byte)
char: 0 ~ 65535 (2byte)
int: +-2147483648 (4byte)
long: ...... (8byte)

실수형
float: +-3.4 E038 (4byte)
double: +-1.7 E308 (8byte)
리터럴은 일종의 값, 특정한 값 자체를 "리터럴"이라고 함
컴퓨터 과학 분야에서 리터럴이란, 소스 코드의 고정된 값을 대표하는 용어다.

●  ●
